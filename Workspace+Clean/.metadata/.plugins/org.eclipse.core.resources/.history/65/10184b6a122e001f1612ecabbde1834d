package matrix;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class mainMatrix {

	
	//54. Spiral Matrix
	public static List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<Integer>();
        int row = matrix.length;
        int col = matrix[0].length;
        
        int l = 0,r = col-1, top = 0, bottom = row-1;
        int count=0, m = col * row;
        while( l <= r && top <= bottom) {
        	for (int i = l; i <= r; i++) {
				res.add(matrix[top][i]);count++;
			}
        	top++;
        	if(count == m) break;
        	for (int i = top; i <= bottom; i++) {
				res.add(matrix[i][r]);count++;
			}
        	r--;
        	if(count == m) break;
        	for (int i = r; i >= l; i--) {
				res.add(matrix[bottom][i]);count++;
			}
        	bottom--;
        	if(count == m) break;
        	for (int i = bottom; i >= top; i--) {
				res.add(matrix[i][l]);count++;
			}
        	l++;
        	if(count == m) break;
        }
        
        return res;
    }
	
	
	
	// 59. Spiral Matrix II
	public int[][] generateMatrix(int n) {
		int [][] arr = new int[n][n];
		int l = 0, r= n-1, t = 0, b = n-1, index = 1;
		while (l <= r && t <= b) {
			for(int i = l; i <= r; i++) arr[t][i] = index++;
			t++;
			for(int i = t ; i <= b ; i++) arr[i][r] = index++;
			r--;
			for(int i = r; i >= l; i--) arr[b][i] = index++;
			b--;
			for(int i = b ; i >= t ; i--) arr[i][l] = index++;
			l++;
		}
		
        return arr;
    }
	
	
	
	//74. Search a 2D Matrix
	public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length , n =matrix[0].length;
        if (matrix == null || m == 0 || n == 0) {
            return false;
        }
        int l = 0, r = m*n-1;
        while (l <= r) {
        	int mid = l + (r - l) /2;
        	int value = matrix[mid/n][mid%n];
        	
        	if(value == target) return true;
        	else if(value < target) l = mid+1;
        	else r = mid -1;
        }
        return false;
    }
	
	
	public static int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }

        int maxArea = 0;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[] heights = new int[cols];

        for (int i = 0; i < rows; i++) {
            // Cập nhật chiều cao cho hàng hiện tại
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == '1') {
                    heights[j]++;
                } else {
                    heights[j] = 0;
                }
            }

            // Tính diện tích lớn nhất có thể tạo ra bởi các cột trong hàng hiện tại
            maxArea = Math.max(maxArea, maxRectangleAreaInHistogram(heights));
        }

        return maxArea;
    }

    private static int maxRectangleAreaInHistogram(int[] heights) {
        int n = heights.length;
        int maxArea = 0;

        for (int i = 0; i < n; i++) {
            if (i == n - 1 || heights[i] > heights[i + 1]) {
                int minHeight = heights[i];
                for (int j = i; j >= 0; j--) {
                    minHeight = Math.min(minHeight, heights[j]);
                    int width = i - j + 1;
                    maxArea = Math.max(maxArea, minHeight * width);
                }
            }
        }

        return maxArea;
    }

    public static void main(String[] args) {

        char[][] matrix = {
            {'1', '0', '1', '0', '0'},
            {'1', '0', '1', '1', '1'},
            {'1', '1', '1', '1', '1'},
            {'1', '0', '0', '1', '0'}
        };
        int result = maximalRectangle(matrix);
        System.out.println("Maximum rectangle area: " + result);  // Output: 6
    }
}
