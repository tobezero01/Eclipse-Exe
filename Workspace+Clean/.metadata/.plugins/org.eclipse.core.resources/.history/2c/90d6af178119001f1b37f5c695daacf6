package Arrays;

import java.time.chrono.MinguoChronology;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

// leetcode arrays easy
public class mainArrays {

    //448
    public static List<Integer> findDisappearedNumbers(int[] nums) {
        for (int i = 0; i < nums.length; i++) { 
            int index = Math.abs(nums[i]) - 1;
            if (nums[index] > 0) {
                nums[index] = -nums[index];
            }
        }
        List<Integer> result = new ArrayList<>();
       
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0) {
                result.add(i + 1);
            }
        }

        return result;
    }
	
	
	// 455
	public static int findContentChildren(int[] g, int[] s) {
		int count =0,l =0,r=0;
		if (s == null || g == null) return 0;
		
		Arrays.sort(g);
		Arrays.sort(s);
		
		while(l < g.length && r < s.length) {
			int child = g[l];
			int cook = s[r];
			if(cook < child) r++;
			if( cook >= child) {
				count ++;
				r++;l++;
			}
		}
		
		return count;
	}

	
	//463
	public static int islandPerimeter(int[][] grid) {
		int row = grid.length, col = grid[0].length;
		int s = 0;
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col ; j++) {
				if(grid[i][j] == 1) {
					s+=4;
				}
				if(i > 0 && grid[i-1][j] == 1) s-=2;
				if(j > 0 && grid[i][j-1] == 1) s-=2;
			}
		}
		return s;
	}
    
	
	//485
	public static  int findMaxConsecutiveOnes(int[] nums) {
        int[] count = new int[nums.length]; 
        int x = 0;
        for (int i = 0; i < nums.length; i++) {
			if(nums[i] == 0) x++;
			else count[x]++;
		}
        int m = count[0];
        for (int i : count) {
			if(i  > m) m = i;
		}
        return m;
    }
	
	
	//495
	public static int findPoisonedDuration(int[] timeSeries, int duration) {
        int count = duration;
        if(timeSeries == null) return 0;
        for (int i = 0; i < timeSeries.length-1; i++) {
			if(timeSeries[i+1] - timeSeries[i] >= duration ) {
				count += duration;
			}else {
				count += timeSeries[i+1] - timeSeries[i] ;
			}
		}
		return count;
    }
	
	
	//496
	public static int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
		int [] ans = new int[n];int max = nums2[0];
        int[] vt =new int[n];
        for (int i = 0; i < m; i++) {
			if(max < nums2[i]) max = nums2[i];
		}
        
        int [] check = new int[max+1];
        for (int i = 0; i < max+1; i++) {
			check[i] = 0;
		}
        for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(nums1[i] == nums2[j]) vt[i] = j;
			}
		}
        for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if(nums1[i] < nums2[j] && vt[i] < j) {check[nums1[i]] = nums2[j];break;}
				else check[nums1[i]] = -1;
			}
		}
        for (int i = 0; i < n; i++) {
			for (int j = 0; j < check.length; j++) {
				if(nums1[i] == j) ans[i] = check[j];
			}
		}
		return ans;
    }
	
	
	//500
	public static String[] findWords(String[] words) {
        String[] n = new String[words.length];
        int k = 0;
        for(int i = 0; i < words.length; i++){
            int check = row(words[i].charAt(0));
            for(int j = 1; j < words[i].length(); j++){
                if(check != row(words[i].charAt(j))){
                    check = 0;
                    break;
                }
            }
            if(check!=0){
                n[k] = words[i];
                k++;
            }
        }
        String ans[] = new String[k];
        for(int i = 0; i < k; i ++){
            ans[i] = n[i]; 
        }
        return ans;
    }
    public static int row(char c){
        c = Character.toLowerCase(c);
        String str1= "qwertyuiop";
        String str2= "asdfghjkl";
        String str3= "zxcvbnm";
        if (str1.contains(String.valueOf(c))){
            return 1;            
        }else if(str2.contains(String.valueOf(c))){
            return 2;
        }else if(str3.contains(String.valueOf(c))){
            return 3;
        }
        return 0;
    }
	
    
    // 506
    //Input: score = [10,3,8,9,4]
    //Output: ["Gold Medal","5","Bronze Medal","Silver Medal","4"]
    public static String[] findRelativeRanks(int[] score) {
    	int n = score.length, max = 0;
    	
    	String [] answer = new String[n];
    	for (int i = 0; i < n; i++) {
			max = Math.max(max, score[i]);
		}
    	int[] temp = new int[max+1];
    	for (int i = 0; i < n; i++) {
			temp[score[i]] = i+1;
		}
    	int place =1;
    	for(int i = max; i >= 0; i--) {
    		if(temp[i]==0) continue;
    		int actualPlace = temp[i]-1;
    		if(place == 1) {
    			answer[actualPlace] = "Gold Medal";
    		}else if(place == 2) {
    			answer[actualPlace] = "Silver Medal";
    		}else if(place == 3) {
    			answer[actualPlace] = "Bronze Medal";
    		}else {
    			answer[actualPlace] = String.valueOf(place);
    			
    		}
    		place++;
    	}
    	return answer;
    }
    
    
    //561
    //Input: nums = [6,2,6,5,1,2]
    //Output: 9
    //Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.
    public static int arrayPairSum(int[] nums) {
    	nums=countingSort(nums);
    	int res = 0;
    	for (int i = 0; i < nums.length-1; i+=2) {
			res += nums[i];
		}
        return res;
    }
    
    public static int[] countingSort(int[] nums) {
    	int n = nums.length;
        int min = nums[0];
        int max = nums[0];
        for (int i = 1; i < n; i++) {
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }
        int range = max - min + 1;
        int[] count = new int[range];
        for (int i = 0; i < n; i++) {
            count[nums[i] - min]++;
        }
        int index = 0;
        for (int i = 0; i < range; i++) {
            while (count[i] > 0) {
                nums[index++] = i + min;
                count[i]--;
            }
        }
        return nums;
    }
    
    
    //575
    //Input: candyType = [1,1,2,2,3,3]
    //Output: 3
    //Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.
    public static int distributeCandies(int[] candyType) {
        boolean[] types = new boolean[200001]; 
        int count = 0;
        for (int candy : candyType) {
            if (!types[candy + 100000]) {
                types[candy + 100000] = true;
                count++;
            }
        }
        return Math.min(count, candyType.length / 2);
    }
    
    //598
    //Input: m = 3, n = 3, ops = [[2,2],[3,3]]
    //Output: 4
    //Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.
    public static int maxCount(int m, int n, int[][] ops) {
    	if(ops.length==0){
            return m*n;
        } 
        int minrow=Integer.MAX_VALUE;
        int mincol=Integer.MAX_VALUE;
        for(int[] grid:ops){
            minrow=Math.min(minrow,grid[0]);
            mincol=Math.min(mincol,grid[1]);
        }
        return minrow*mincol;
    }
    
    
    //599
    public static String[] findRestaurant(String[] list1, String[] list2) {
//        // Bước 1: Tạo một HashMap cho list1
//        HashMap<String, Integer> map = new HashMap<>();
//        for (int i = 0; i < list1.length; i++) {
//            map.put(list1[i], i);
//        }
//        // Bước 2: Duyệt qua list2 và tìm các chuỗi chung
//        List<String> result = new ArrayList<>();
//        int minSum = Integer.MAX_VALUE;
//        for (int j = 0; j < list2.length; j++) {
//            if (map.containsKey(list2[j])) {
//                int i = map.get(list2[j]);
//                int sum = i + j;
//
//                // Bước 3: Cập nhật tổng chỉ số nhỏ nhất và danh sách kết quả
//                if (sum < minSum) {
//                    result.clear();
//                    result.add(list2[j]);
//                    minSum = sum;
//                } else if (sum == minSum) {
//                    result.add(list2[j]);
//                }
//            }
//        }
//        // Bước 4: Trả về kết quả
//        return result.toArray(new String[result.size()]);
    	HashMap<String, Integer> map = new HashMap<>();
    	for (int i = 0; i < list1.length; i++) {
			map.put(list1[i], i);
		}
    	List<String> result = new ArrayList<>();
    	int minSum = Integer.MAX_VALUE;
    	for (int i = 0; i < list2.length; i++) {
			if(map.containsKey(list2[i])) {
				int j = map.get(list2[i]);
				int currentSum = i+j;
				
				if(currentSum < minSum) {
					result.clear();
					result.add(list2[i]);
					minSum = currentSum;
				}else if (currentSum == minSum) {
					result.add(list2[i]);
				}
			}
		}
    	return result.toArray(new String[result.size()]);
    }
    
    
    //605
    public static boolean canPlaceFlowers(int[] flowerbed, int n) {
//    	int count = 0;
//    	int len = flowerbed.length;
//    	for (int i = 0; i < len; i++) {
//			if(flowerbed[i] == 0 ) {
//				boolean l = (i==0) || (flowerbed[i-1] == 0);
//				boolean r = (i==len-1) || (flowerbed[i+1] == 0);
//				if(l && r) {
//					flowerbed[i] =1;
//					count ++;
//					
//					if(count >= n) return true;
//				}
//			}
//		}
//    	return count >=n;
    	
    	int count = 0;
        for (int i = 0; i < flowerbed.length; i += 2) {
            if (flowerbed[i] == 0) {
                if (i == flowerbed.length - 1 || flowerbed[i + 1] == 0) {
                    count++;
                } else {
                    i++;
                }
            }
            if (count >= n) {
                return true;
            }
        }
        return false;
    }
    
    
    //628
    public static int maximumProduct(int[] nums) {
    	Arrays.sort(nums);
        int n = nums.length;
        return Math.max(nums[n-1]*nums[n-2]*nums[n-3], nums[0]*nums[1]*nums[n-1]);
    }
    
    //628 nâng cấp cho n số
    public static int maximumProduct(int[] nums, int n) {
        Arrays.sort(nums);
        int len = nums.length;
        
        // Trường hợp tích của n số lớn nhất
        int maxProduct = 1;
        for (int i = len - 1; i >= len - n; i--) {
            maxProduct *= nums[i];
        }
        
        // Kiểm tra trường hợp kết hợp các số nhỏ nhất và lớn nhất
        for (int i = 0; i <= n; i++) {
            int tempProduct = 1;
            for (int j = 0; j < i; j++) {
                tempProduct *= nums[j];
            }
            for (int j = len - 1; j >= len - (n - i); j--) {
                tempProduct *= nums[j];
            }
            maxProduct = Math.max(maxProduct, tempProduct);
        }
        
        return maxProduct;
    }
    
    
    
    //643
    public static double findMaxAverage(int[] nums, int k) {
    	double sum = 0;
    	for (int i = 0; i < k; i++) {
			sum+=nums[i];
		}
    	double currentSum = sum;
    	for (int i = 0; i < nums.length-k; i++) {
			currentSum += nums[i+k] - nums[i];
			sum = Math.max(sum, currentSum);
		}
        return sum/k;
    }
    
    
    //674
    public static int findLengthOfLCIS(int[] nums) {
    	int count = 1;
    	if(nums == null) count =0;
    	int n = nums.length;
    	int curCount = count;
    	for (int i = 0; i < n-1; i++) {
			if(nums[i] < nums[i+1]) curCount++; 
			else {
				curCount= 1;
			}
			count = Math.max(count,curCount);
		}
        return count;
    }
    
    
    //682
    public static int calPoints(String[] operations) {
    	int n = operations.length;
    	int[] score = new int[n];
    	int index = 0;
    	for(String op : operations) {
    		if(op.equals("+")) {
    			score[index] = score[index-1] + score[index-2];
    			index++;
    		}else if (op.equals("D")) {
    			score[index] = 2 * score[index - 1];
                index++;
    		}else if(op.equals("C")) {
    			index--;
    		}else {
    			score[index] = Integer.parseInt(op);
    			index++;
    		}
    	}
    	int sum = 0;
    	for (int i = 0; i < index; i++) {
			sum+= score[i];
		}
        return sum;
        
//        Stack<Integer> stack = new Stack<>();
//        for(int i=0; i<operations.length; i++){
//            if(operations[i].equals("C")){
//                stack.pop();
//            }
//            else if(operations[i].equals("D")){
//                stack.push(2* stack.peek());
//            }
//            else if(operations[i].equals("+") && stack.size()>=2){
//                int x = stack.pop();
//                int y = stack.pop();
//                int z = x+y;
//
//                stack.push(y);
//                stack.push(x);
//                stack.push(z);
//            }
//            else{
//                stack.push(Integer.parseInt(operations[i]));
//            }
//        }
//        int sum =0;
//        while(!stack.isEmpty()){
//            sum+=stack.pop();
//        }
//        return sum;
    }
    
    //697
    public static int findShortestSubArray(int[] nums) {
    	int n = nums.length;
    	int max=nums[0];
    	for (int i = 1; i < n; i++) {
			max = Math.max(max,nums[i]);
		}
    	max = Math.max(max,n);
    	int[] check = new int[max+1];
    	for (int i = 1; i <= max; i++) {
			check[nums[i-1]]++;
		}
    	int degree = 0;
    	for (int i = 0; i <= max; i++) {
    		degree = Math.max(degree,check[i]);
		}
    	for (int i = 0; i <= max; i++) {
    		System.out.println(i + " " + check[i]);
		}
    	int minLength = Integer.MAX_VALUE;
    	for (int i = 0; i < max; i++) {
			if(check[i] == degree) {
				int l = 0,r = n-1;
				while (l <= r) {
					if(nums[l] == i && nums[r] == i) {
						minLength = Math.min(minLength, r-l+1);
						break;
					}
					if(nums[l] != i) l++;
					if(nums[r]!= i) r--;
					
				}
			}
		}
        return degree ;
    }


    public static void main(String[] args) {
    	//findShortestSubArray(new int[] {1,2,3,1,4,2});
    	System.out.println(findShortestSubArray(new int[] {2,2}));
    	//countingSort(new int[] {1,4,3,2});
    	//System.out.println(distributeCandies(new int[] {6,6,6,6}));
    	
    }
}
