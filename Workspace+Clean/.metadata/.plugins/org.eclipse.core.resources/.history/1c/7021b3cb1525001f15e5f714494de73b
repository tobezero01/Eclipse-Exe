package Arrays;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

import javax.naming.ldap.HasControls;

public class ArraysMedium {
	
	
	
	//11. Container With Most Water
	public static int maxArea(int[] height) {
		int n = height.length;
		int l = 0,r = n-1;
		int max = Integer.MIN_VALUE;
		
		while ( l < r) {
			int minHeight = Math.min(height[l], height[r]);
			max = Math.max(max, (r-l) * minHeight);
			while(height[l] <= minHeight) l++;
			while(height[r] <= minHeight) r--;
		}
		return max;
		
		
		
//		int n = height.length;
//		int l = 0,r = n-1;
//		int max = Integer.MIN_VALUE;
//		
//		while ( l < r) {
//			int minHeight = Math.min(height[l], height[r]);
//			max = Math.max(max, (r-l) * minHeight);
//			if(height[l] < height[r]) l++;
//			else r--;
//		}
//		return max;
    }
	
	
	
	
	
	//15. 3Sum
	public List<List<Integer>> threeSum(int[] nums) {
		List<List<Integer>> list = new ArrayList<>();
		Arrays.sort(nums);
		int n = nums.length;
		
		for (int i = 0; i < n; i++) {
			if(i > 0 && nums[i] == nums[i-1]) continue; 
			int l = i+1, r = n-1;
			
			while (l < r) {
				int totalSum = nums[i] + nums[l] + nums[r];
				if(totalSum == 0) {
					List<Integer> lt = new ArrayList<Integer>();
					lt.add(nums[i]);
					lt.add(nums[l]);
					lt.add(nums[r]);
					list.add(lt);
					l++;
					while (nums[l] == nums[l-1] && l < r) l++;
				}else if(totalSum > 0) r--;
				else l++;
			}
		}
		return list;
    }
	
	
	
	
	
	//16. 3Sum Closest
	public int threeSumClosest(int[] nums, int target) {
		int n=nums.length;
        int sum=0;
        int closeSum=Integer.MAX_VALUE;
        Arrays.sort(nums);
        for(int i=0;i<n;i++){
            if(i>0&&nums[i]==nums[i-1]) continue;
            int j=i+1;
            int k=n-1;
            while(j<k){
                 sum=nums[i]+nums[j]+nums[k];
                if(Math.abs(target-sum)<Math.abs(target-closeSum)) closeSum=sum;
                else if(sum<target) j++;
                else k--;
            }
        }
        return closeSum;
    }
	
	
	
	
	//18. 4Sum
	public List<List<Integer>> fourSum(int[] nums, int target) {
		Arrays.sort(nums);
        List<List<Integer>> q=new ArrayList<>();
        int n = nums.length;
        
        for (int i = 0; i < n-3; i++) {
			if( i > 0 && nums[i] == nums[i-1] ) continue;
			
			for (int j = i+1; j < n; j++) {
				if(j > i+1 && nums[j] == nums[j-1]) continue;
				int l = j+1;
				int r = n-1;
				
				while( l < r) {
					long sum = (long)nums[i] + nums[j] + nums[l] + nums[r];
					if(target == sum) {
						ArrayList<Integer> al=new ArrayList<>();
                        al.add(nums[i]);
                        al.add(nums[j]);
                        al.add(nums[l]);
                        al.add(nums[r]);
                        Collections.sort(al);
                        q.add(al);
                        l++;r--;
                        
                        while ( l < r && nums[r] == nums[r+1]) r--;
                        while ( l < r && nums[l] == nums[l-1]) l++;
					} else if (sum < target) l++;
					else r--;
				}
			}
		}
        
        return q;
    }
	
	
	
	
	
	
	//31. Next Permutation 
	public void swap(int[] nums, int i , int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
	
	public void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
	
	public void nextPermutation(int[] nums) {
		if (nums == null || nums.length <= 1) return;
        
        int i = nums.length - 2;
        // Bước 1: Tìm điểm giảm đầu tiên
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        
        if (i >= 0) { // Nếu tìm thấy điểm giảm
            int j = nums.length - 1;
            // Bước 2: Tìm phần tử nhỏ nhất lớn hơn nums[i]
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            // Bước 3: Hoán đổi
            swap(nums, i, j);
        }
        // Bước 4: Đảo ngược phần sau
        reverse(nums, i + 1, nums.length - 1);
    }
	
	
	
	
	
	//33. Search in Rotated Sorted Array
	public int search(int[] nums, int target) {
		int l = 0, r = nums.length-1;
		while (l < r) {
			int mid = (r-l)/2;
			if(nums[mid] == target) return mid;
			
			// kiem tra target thuoc phan doan nao phan doan
			if(nums[l] <= nums[mid]) {
				if(nums[l] <= target && target < nums[mid]) r = mid-1;
				else l = mid+1;
			}
			else {
				if(target > nums[mid] && target <= nums[r]) l = mid+1;
				else r = mid-1;
			}
		}
		return -1;
	}
	
	
	
	
	//34. Find First and Last Position of Element in Sorted Array
	public static int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int l = 0,r = n-1;
        int valIndex=-1;
        while (l <= r) {
        	int mid = l + (r-l) /2;
        	if(nums[mid] == target) {
				valIndex = mid;
				break;
			}
        	else if(nums[mid] > target) {r = mid-1;}
        	else {l = mid+1;}
        }
        if (valIndex == -1) {
            return new int[]{-1, -1};
        }
        int fIndex = valIndex;
        while (fIndex > 0 && nums[fIndex - 1] == target) {
            fIndex--;
        }
        
        // Tìm chỉ số cuối
        int lIndex = valIndex;
        while (lIndex < n - 1 && nums[lIndex + 1] == target) {
            lIndex++;
        }

        return new int[] {fIndex,lIndex};
	
	}
	
	
	
	
	
	//36. Valid Sudoku
	public boolean isValidSudoku(char[][] board) {
//		HashSet<String > hs =new HashSet<String>();
//		int count=0;
//        for (int i = 0; i < 9; i++) {
//			for (int j = 0; j < 9; j++) {
//				char crrVal = board[i][j];
//				if(crrVal != '.') {
//					// tao chuoi dai dien cho hang cot va 3x3
//					String rowKey = "row" + i + crrVal;
//					String colKey = "col" + j + crrVal;
//					String boxKey = "box" + (i/3) + (j/3) + crrVal;
//					hs.add(boxKey);hs.add(colKey);hs.add(rowKey);
//					count +=3;	
//				}
//			}
//		}
//        return count == hs.size();
		
		
		
		// Mảng để theo dõi các giá trị đã gặp trong hàng, cột và ô 3x3
        boolean[][] rows = new boolean[9][9];
        boolean[][] cols = new boolean[9][9];
        boolean[][] boxes = new boolean[9][9];
        
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '1'; // Chuyển đổi ký tự thành số (0-8)
                    int boxIndex = (i / 3) * 3 + (j / 3); // Tính chỉ số của ô 3x3
                    
                    // Kiểm tra xem số này đã xuất hiện trong hàng, cột hoặc ô 3x3 chưa
                    if (rows[i][num] || cols[j][num] || boxes[boxIndex][num]) {
                        return false;
                    }
                    
                    // Đánh dấu số này đã xuất hiện trong hàng, cột và ô 3x3
                    rows[i][num] = true;
                    cols[j][num] = true;
                    boxes[boxIndex][num] = true;
                }
            }
        }
        
        return true;
    }
	
	
	
	
	
	public static void main(String[] args) {
		char[][] board = {
			    {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			    {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
			    {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			    {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			    {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			    {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			    {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			    {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			    {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
			};
		int [] s = new int[] {5,7,7,8,8,10};
		int [] l = searchRange(s,8);
		System.out.println(l[0] + l[1]);
	}
	
}